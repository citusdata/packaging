citus (8.1.1.citus-1) stable; urgency=low

  * Fixes maintenance daemon panic due to unreleased spinlock

  * Fixes an issue with having clause when used with complex joins

 -- Hanefi Onaldi <hanefi@citusdata.com>  Mon, 7 Jan 2019 16:26:13 +0000

citus (8.1.0.citus-1) stable; urgency=low

  * Turns on ssl by default for new installations of citus

  * Restricts SSL Ciphers to TLS1.2 and above

  * Adds support for INSERT INTO SELECT..ON CONFLICT/RETURNING via coordinator

  * Adds support for round-robin task assignment for queries to reference tables

  * Adds support for SQL tasks using worker_execute_sql_task UDF with task-tracker

  * Adds support for VALIDATE CONSTRAINT queries

  * Adds support for disabling hash aggregate with HLL

  * Adds user ID suffix to intermediate files generated by task-tracker

  * Only allow transmit from pgsql_job_cache directory

  * Disallows GROUPING SET clauses in subqueries

  * Removes restriction on user-defined group ID in node addition functions

  * Relaxes multi-shard modify locks when enable_deadlock_prevention is disabled

  * Improves security in task-tracker protocol

  * Improves permission checks in internal DROP TABLE functions

  * Improves permission checks in cluster management functions

  * Cleans up UDFs and fixes permission checks

  * Fixes crashes caused by stack size increase under high memory load

  * Fixes a bug that could cause maintenance daemon panic

 -- Burak Velioglu <velioglub@citusdata.com>  Tue, 18 Dec 2018 15:12:45 +0000

citus (8.0.2.citus-1) stable; urgency=low

  * Fixes a bug that could cause maintenance daemon panic

  * Fixes crashes caused by stack size increase under high memory load

 -- Burak Velioglu <velioglub@citusdata.com>  Thu, 13 Dec 2018 13:56:44 +0000

citus (7.5.4.citus-1) stable; urgency=low

  * Fixes a bug that could cause maintenance daemon panic

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 12 Dec 2018 11:45:24 +0000

citus (8.0.1.citus-1) stable; urgency=low

  * Execute SQL tasks using worker_execute_sql_task UDF when using task-tracker

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 28 Nov 2018 11:38:47 +0000

citus (7.5.3.citus-1) stable; urgency=low

  * Execute SQL tasks using worker_execute_sql_task UDF when using task-tracker

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 28 Nov 2018 10:52:20 +0000

citus (7.5.2.citus-1) stable; urgency=low

  * Fixes inconsistent metadata error when shard metadata caching get interrupted

  * Fixes a bug that could cause memory leak

  * Fixes a bug that prevents recovering wrong transactions in MX

  * Fixes a bug to prevent wrong memory accesses on Citus MX under very high load

  * Fixes crashes caused by stack size increase under high memory load

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 14 Nov 2018 20:42:16 +0000

citus (8.0.0.citus-1) stable; urgency=low

  * Adds support for PostgreSQL 11

  * Adds support for applying DML operations on reference tables from MX nodes

  * Adds distributed locking to truncated MX tables

  * Adds support for running TRUNCATE command from MX worker nodes

  * Adds views to provide insight about the distributed transactions

  * Adds support for TABLESAMPLE in router queries

  * Adds support for INCLUDE option in index creation

  * Adds option to allow simple DML commands from hot standby

  * Adds support for partitioned tables with replication factor > 1

  * Prevents a deadlock on concurrent DROP TABLE and SELECT on Citus MX

  * Fixes a bug that prevents recovering wrong transactions in MX

  * Fixes a bug to prevent wrong memory accesses on Citus MX under very high load

  * Fixes a bug in MX mode, calling DROP SCHEMA with existing partitioned table

  * Fixes a bug that could cause modifying CTEs to select wrong execution mode

  * Fixes a bug preventing rollback in CREATE PROCEDURE

  * Fixes a bug on not being able to drop index on a partitioned table

  * Fixes a bug on TRUNCATE when there is a foreign key to a reference table

  * Fixes a performance issue in prepared INSERT..SELECT

  * Fixes a bug which causes errors on DROP DATABASE IF EXISTS

  * Fixes a bug to remove intermediate result directory in pull-push execution

  * Improves query pushdown planning performance

  * Evaluate functions anywhere in query

 -- Burak Velioglu <velioglub@citusdata.com>  Fri, 02 Nov 2018 08:06:42 +0000

citus (7.5.1.citus-1) stable; urgency=low

  * Improves query pushdown planning performance

  * Fixes a bug that could cause modifying CTEs to select wrong execution mode

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 29 Aug 2018 08:06:42 +0000

citus (7.4.2.citus-1) stable; urgency=low

  * Fixes a segfault in real-time executor during online shard move

 -- Mehmet Furkan Sahin <furkan@citusdata.com>  Fri, 27 Jul 2018 13:42:27 +0000

citus (7.5.0.citus-1) stable; urgency=low

  * Adds foreign key support from hash distributed to reference tables

  * Adds SELECT ... FOR UPDATE support for router plannable queries

  * Adds support for non-partition columns in count distinct

  * Fixes a segfault in real-time executor during online shard move

  * Fixes ALTER TABLE ADD COLUMN constraint check

  * Fixes a bug where INSERT ... SELECT allows one to update dist. column

  * Allows DDL commands to be sequentialized via citus.multi_shard_modify_mode

  * Adds support for topn_union_agg and topn_add_agg across shards

  * Adds support for hll_union_agg and hll_add_agg across shards

  * Fixes a bug that might cause shards to have a wrong owner

  * Adds select_opens_transaction_block GUC

  * Adds utils to implement DDLs for policies in future

  * Makes intermediate results to use separate connections

  * Adds a node_conninfo GUC to set outgoing connection settings

 -- Mehmet Furkan Sahin <furkan@citusdata.com>  Wed, 25 Jul 2018 9:32:24 +0000

citus (6.2.6.citus-1) stable; urgency=low

  * Adds support for respecting enable_hashagg in the master planner

 -- Burak Velioglu <velioglub@citusdata.com>  Fri, 06 Jul 2018 13:30:08 +0000

citus (7.4.1.citus-1) stable; urgency=low

  * Fixes a bug that could cause txns to incorrectly proceed after failure

  * Fixes a bug on INSERT ... SELECT queries in prepared statements

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 20 Jun 2018 12:25:30 +0000

citus (7.2.2.citus-1) stable; urgency=low

  * Fixes a bug that could cause SELECTs to crash during a rebalance

 -- Burak Velioglu <velioglub@citusdata.com>  Thu, 17 May 2018 11:51:56 +0000

citus (7.4.0.citus-1) stable; urgency=low

  * Adds support for non-pushdownable subqueries and CTEs in UPDATE/DELETE

  * Adds support for pushdownable subqueries and joins in UPDATE/DELETE

  * Adds faster shard pruning for subqueries

  * Adds partitioning support to MX table

  * Adds support for (VACUUM | ANALYZE) VERBOSE

  * Adds support for multiple ANDs in HAVING for pushdown planner

  * Adds support for quotation needy schema names

  * Improves operator check time in physical planner for custom data types

  * Removes broadcast join logic

  * Deprecates large_table_shard_count and master_expire_table_cache()

  * Modifies master_update_node to write-lock shards hosted by node over update

  * DROP TABLE now drops shards as the currrent user instead of the superuser

  * Adds specialised error codes for connection failures

  * Improves error messages on connection failure

  * Fixes issue which prevented multiple citus_table_size calls per query

  * Tests are updated to use create_distributed_table

 -- Burak Velioglu <velioglub@citusdata.com>  Tue, 15 May 2018 13:01:17 +0000

citus (7.3.0.citus-1) stable; urgency=low

  * Adds support for non-colocated joins between subqueries

  * Adds support for window functions that can be pushed down to worker

  * Adds support for modifying CTEs

  * Adds recursive plan for WHERE clause subqueries with recurring FROM clause

  * Adds support for bool_ and bit_ aggregates

  * Adds support for Postgres jsonb and json aggregation functions

  * Adds support for respecting enable_hashagg in the master plan

  * Performance improvements to reduce distributed planning time

  * Fixes a bug on planner when aggregate is used in ORDER BY

  * Fixes a bug on planner when DISTINCT (ON) clause is used with GROUP BY

  * Fixes a planner bug with distinct and aggregate clauses

  * Fixes a bug that opened new connections on each table size function call

  * Fixes a bug canceling backends not involved in distributed deadlocks

  * Fixes count distinct bug on column expressions when used with subqueries

  * Improves error handling on worker node failures

  * Improves error messages for INSERT queries that have subqueries

 -- Burak Velioglu <velioglub@citusdata.com>  Thu, 15 Mar 2018 14:16:10 +0000

citus (7.2.1.citus-1) stable; urgency=low

  * Fixes count distinct bug on column expressions when used with subqueries

  * Adds support for respecting enable_hashagg in the master plan

  * Fixes a bug canceling backends not involved in distributed deadlocks

 -- Burak Velioglu <velioglub@citusdata.com>  Tue, 06 Feb 2018 14:46:07 +0000

citus (7.2.0.citus-1) stable; urgency=low

  * Adds support for CTEs

  * Adds support for subqueries that require merge step

  * Adds support for set operations (UNION, INTERSECT, ...)

  * Adds support for 2PC auto-recovery

  * Adds support for querying local tables in CTEs and subqueries

  * Adds support for more SQL coverage in subqueries for reference tables

  * Adds support for count(distinct) in queries with a subquery

  * Adds support for non-equijoins when there is already an equijoin

  * Adds support for real-time executor to run in transaction blocks

  * Adds infrastructure for storing intermediate distributed query results

  * Adds a new GUC named enable_repartition_joins for auto executor switch

  * Adds support for limiting the intermediate result size

  * Improves support for queries with unions containing filters

  * Improves support for queries with unions containing joins

  * Improves support for subqueries in the WHERE clause

  * Increases COPY throughput

  * Enables pushing down queries containing only recurring tuples and GROUP BY

  * Load-balance queries that read from 0 shards

  * Improves support for using functions in subqueries

  * Fixes a bug that causing real-time executor to crash during cancellation

  * Fixes a bug that causing real-time executor to get stuck on cancellation

  * Fixes a bug that could block modification queries unnecessarily

  * Fixes a bug that could cause assigning wrong IDs to transactions

  * Fixes a bug that could cause an assert failure with ANALYZE statements

  * Fixes a bug that would push down wrong set operations in subqueries

  * Fixes a bug that could cause a deadlock in create_distributed_table

  * Fixes a bug that could confuse user about ANALYZE usage

  * Fixes a bug causing false positive distributed deadlock detections

  * Relaxes the locking for DDL commands on partitioned tables

  * Relaxes the locking on COPY with replication

  * Logs more remote commands when citus.log_remote_commands is set

 -- Burak Velioglu <velioglub@citusdata.com>  Tue, 16 Jan 2018 14:34:20 +0000

citus (6.2.5.citus-1) stable; urgency=low

  * Fixes a bug that could crash the coordinator while reporting a remote error

 -- Burak Velioglu <velioglub@citusdata.com>  Thu, 11 Jan 2018 11:40:28 +0000

citus (7.1.2.citus-1) stable; urgency=low

  * Fixes a bug that could cause assigning wrong IDs to transactions

  * Increases COPY throughput

 -- Burak Velioglu <velioglub@citusdata.com>  Fri, 05 Jan 2018 09:00:07 +0000

citus (7.1.1.citus-1) stable; urgency=low

  * Fixes a bug preventing pushing down subqueries with reference tables

  * Fixes a bug that could create false positive distributed deadlocks

  * Fixes a bug that could prevent running concurrent COPY and multi-shard DDL

  * Fixes a bug that could mislead users about ANALYZE queries

 -- Burak Velioglu <velioglub@citusdata.com>  Tue, 05 Dec 2017 09:00:07 +0000

citus (7.1.0.citus-1) stable; urgency=low

  * Adds support for native queries with multi shard UPDATE/DELETE queries

  * Expands reference table support in subquery pushdown

  * Adds window function support for subqueries and INSERT ... SELECT queries

  * Adds support for COUNT(DISTINCT) [ON] queries on non-partition columns

  * Adds support for DISTINCT [ON] queries on non-partition columns

  * Introduces basic usage statistic collector

  * Adds support for setting replica identity while creating distributed tables

  * Adds support for ALTER TABLE ... REPLICA IDENTITY queries

  * Adds pushdown support for LIMIT and HAVING grouped by partition key

  * Adds support for INSERT ... SELECT queries via worker nodes on MX clusters

  * Adds support for adding primary key using already defined index

  * Adds replication parameter to shard copy functions

  * Changes shard_name UDF to omit public schema name

  * Adds master_move_node UDF to make changes on nodename/nodeport more easy

  * Fixes a bug that could cause casting error with INSERT ... SELECT queries

  * Fixes a bug that could prevent upgrading servers from Citus 6.1

  * Fixes a bug that could prevent attaching partitions to a table in schema

  * Fixes a bug preventing adding nodes to clusters with reference tables

  * Fixes a bug that could cause a crash with INSERT ... SELECT queries

  * Fixes a bug that could prevent creating a partitoned table on Cloud

  * Implements various performance improvements

  * Adds internal infrastructures and tests to improve development process

  * Addresses various race conditions and deadlocks

  * Improves and standardizes error messages

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 15 Nov 2017 09:00:07 +0000

citus (7.0.3.citus-1) stable; urgency=low

  * Fixes several bugs that could cause crash

  * Fixes a bug that could cause deadlock while creating reference tables

  * Fixes a bug that could cause false-positives in deadlock detection

  * Fixes a bug that could cause  2PC recovery not to work from MX workers

  * Fixes a bug that could cause cache incohorency

  * Fixes a bug that could cause maintenance daemon to skip cache invalidations

  * Improves performance of transaction recovery by using correct index

 -- Burak Yucesoy <burak@citusdata.com>  Mon, 16 Oct 2017 11:52:07 +0000

citus (7.0.2.citus-1) stable; urgency=low

  * Updates task-tracker to limit file access

 -- Burak Yucesoy <burak@citusdata.com>  Thu, 28 Sep 2017 22:29:01 +0000

citus (6.2.4.citus-1) stable; urgency=low

  * Updates task-tracker to limit file access

 -- Burak Yucesoy <burak@citusdata.com>  Thu, 28 Sep 2017 21:31:35 +0000

citus (6.1.3.citus-1) stable; urgency=low

  * Updates task-tracker to limit file access

 -- Burak Yucesoy <burak@citusdata.com>  Thu, 28 Sep 2017 20:31:35 +0000

citus (7.0.1.citus-1) stable; urgency=low

  * Fixes a bug that could cause memory leaks in INSERT ... SELECT queries

  * Fixes a bug that could cause incorrect execution of prepared statements

  * Fixes a bug that could cause excessive memory usage during COPY

  * Incorporates latest changes from core PostgreSQL code

 -- Burak Yucesoy <burak@citusdata.com>  Tue, 12 Sep 2017 17:53:50 +0000

citus (7.0.0.citus-1) stable; urgency=low

  * Adds support for PostgreSQL 10

  * Drops support for PostgreSQL 9.5

  * Adds support for multi-row INSERT

  * Adds support for router UPDATE and DELETE queries with subqueries

  * Adds infrastructure for distributed deadlock detection

  * Deprecates enable_deadlock_prevention flag

  * Adds support for partitioned tables

  * Adds support for creating UNLOGGED tables

  * Adds support for SAVEPOINT

  * Adds UDF citus_create_restore_point for taking distributed snapshots

  * Adds support for evaluating non-pushable INSERT ... SELECT queries

  * Adds support for subquery pushdown on reference tables

  * Adds shard pruning support for IN and ANY

  * Adds support for UPDATE and DELETE commands that prune down to 0 shard

  * Enhances transaction support by relaxing some transaction restrictions

  * Fixes a bug causing crash if distributed table has no shards

  * Fixes a bug causing crash when removing inactive node

  * Fixes a bug causing failure during COPY on tables with dropped columns

  * Fixes a bug causing failure during DROP EXTENSION

  * Fixes a bug preventing executing VACUUM and INSERT concurrently

  * Fixes a bug in prepared INSERT statements containing an implicit cast

  * Fixes several issues related to statement cancellations and connections

  * Fixes several 2PC related issues

  * Removes an unnecessary dependency causing warning messages in pg_dump

  * Adds internal infrastructure for follower clusters

  * Adds internal infrastructure for progress tracking

  * Implements various performance improvements

  * Adds internal infrastructures and tests to improve development process

  * Addresses various race conditions and deadlocks

  * Improves and standardizes error messages

 -- Burak Yucesoy <burak@citusdata.com>  Mon, 28 Aug 2017 12:27:53 +0000

citus (6.2.3.citus-1) stable; urgency=low

  * Fixes a crash during execution of local CREATE INDEX CONCURRENTLY

  * Fixes a bug preventing usage of quoted column names in COPY

  * Fixes a bug in prepared INSERTs with implicit cast in partition column

  * Relaxes locks in VACUUM to ensure concurrent execution with INSERT

 -- Burak Yucesoy <burak@citusdata.com>  Thu, 13 Jul 2017 11:27:17 +0000

citus (6.2.2.citus-1) stable; urgency=low

  * Fixes a common cause of deadlocks when repairing tables with foreign keys

 -- Burak Velioglu <velioglub@citusdata.com>  Wed, 07 Jun 2017 09:42:17 +0000

citus (6.1.2.citus-1) stable; urgency=low

  * Fixes a common cause of deadlocks when repairing tables with foreign keys

 -- Jason Petersen <jason@citusdata.com>  Wed, 31 May 2017 16:14:11 +0000

citus (6.2.1.citus-1) stable; urgency=low

  * Relaxes version-check logic to avoid breaking non-distributed commands

 -- Jason Petersen <jason@citusdata.com>  Wed, 24 May 2017 22:36:07 +0000

citus (6.2.0.citus-1) stable; urgency=low

  * Increases SQL subquery coverage by pushing down more kinds of queries

  * Adds CustomScan API support to allow read-only transactions

  * Adds support for CREATE/DROP INDEX CONCURRENTLY

  * Adds support for ALTER TABLE ... ADD CONSTRAINT

  * Adds support for ALTER TABLE ... RENAME COLUMN

  * Adds support for DISABLE/ENABLE TRIGGER ALL

  * Adds support for expressions in the partition column in INSERTs

  * Adds support for query parameters in combination with function evaluation

  * Adds support for creating distributed tables from non-empty local tables

  * Adds UDFs to get size of distributed tables

  * Adds UDFs to add a new node without replicating reference tables

  * Adds checks to prevent running Citus binaries with wrong metadata tables

  * Improves shard pruning performance for range queries

  * Improves planner performance for joins involving co-located tables

  * Improves shard copy performance by creating indexes after copy

  * Improves task-tracker performance by batching several status checks

  * Enables router planner for queries on range partitioned table

  * Changes TRUNCATE to drop local data only if enable_ddl_propagation is off

  * Starts to execute DDL on coordinator before workers

  * Fixes a bug causing incorrectly reading invalidated cache

  * Fixes a bug related to creation of schemas in workers with incorrect owner

  * Fixes a bug related to concurrent run of shard drop functions

  * Fixes a bug related to EXPLAIN ANALYZE with DML queries

  * Fixes a bug related to SQL functions in FROM clause

  * Adds a GUC variable to report cross shard queries

  * Fixes a bug related to partition columns without native hash function

  * Adds internal infrastructures and tests to improve development process

  * Addresses various race conditions and deadlocks

  * Improves and standardizes error messages

 -- Burak Yucesoy <burak@citusdata.com>  Tue, 16 May 2017 16:05:22 +0000

citus (6.1.1.citus-1) stable; urgency=low

  * Fixes a crash caused by router executor use after connection timeouts

  * Fixes a crash caused by relation cache invalidation during COPY

  * Fixes bug related to DDL use within PL/pgSQL functions

  * Fixes a COPY bug related to types lacking binary output functions

  * Fixes a bug related to modifications with parameterized partition values

  * Fixes improper value interpolation in worker sequence generation

  * Guards shard pruning logic against zero-shard tables

  * Fixes possible NULL pointer dereference and buffer underflow, via PVS-Studio

  * Fixes a INSERT...SELECT bug that could push down non-partition column JOINs

 -- Metin Doslu <metin@citusdata.com>  Fri, 5 May 2017 17:42:00 +0000

citus (6.1.0.citus-1) stable; urgency=low

  * Implements reference tables, transactionally replicated to all nodes

  * Adds upgrade_to_reference_table UDF to upgrade pre-6.1 reference tables

  * Expands prepared statement support to nearly all statements

  * Adds support for creating VIEWs which reference distributed tables

  * Adds targeted VACUUM/ANALYZE support

  * Adds support for the FILTER clause in aggregate expressions

  * Adds support for function evaluation within INSERT INTO ... SELECT

  * Adds support for creating foreign key constraints with ALTER TABLE

  * Adds logic to choose router planner for all queries it supports

  * Enhances create_distributed_table with parameter for explicit colocation

  * Adds generally useful utility UDFs previously available as "Citus Tools"

  * Adds user-facing UDFs for locking shard resources and metadata

  * Refactors connection and transaction management for more consistency

  * Enhances COPY with fully transactional semantics

  * Improves support for cancellation for a number of queries and commands

  * Adds column_to_column_name UDF to help users understand partkey values

  * Adds master_disable_node UDF for temporarily disabling nodes

  * Adds proper MX ("masterless") metadata propagation logic

  * Adds start_metadata_sync_to_node UDF to propagate metadata changes to nodes

  * Enhances SERIAL compatibility with MX tables

  * Adds an node_connection_timeout parameter to set node connection timeouts

  * Adds enable_deadlock_prevention setting to permit multi-node transactions

  * Adds a replication_model setting to specify replication of new tables

  * Changes the shard_replication_factor setting's default value to one

  * Adds code to automatically set max_prepared_transactions if not configured

  * Accelerates lookup of colocated shard placements

  * Fixes a bug affecting INSERT INTO ... SELECT queries using constant values

  * Fixes a bug by ensuring COPY does not mark placements inactive

  * Fixes a bug affecting reads from pg_dist_shard_placement table

  * Fixes a crash triggered by creating a foreign key without a column

  * Fixes a crash related to accessing catalog tables after aborted transaction

  * Fixes a bug affecting JOIN queries requiring repartitions

  * Fixes a bug affecting node insertions to pg_dist_node table

  * Fixes a crash triggered by queries with modifying common table expressions

  * Fixes a bug affecting workloads with concurrent shard appends and deletions

  * Addresses various race conditions and deadlocks

  * Improves and standardizes error messages

 -- Burak Yucesoy <burak@citusdata.com>  Thu, 9 Feb 2017 16:17:41 +0000

citus (6.0.1.citus-3) stable; urgency=low

  * First build using new versioning practices

 -- Jason Petersen <jason@citusdata.com>  Wed, 8 Feb 2017 23:19:46 +0000

citus (6.0.1.citus-2) stable; urgency=low

  * Transitional package to guide users to new package name

 -- Jason Petersen <jason@citusdata.com>  Mon, 6 Feb 2017 16:33:44 +0000

citus (6.0.1.citus-1) stable; urgency=low

  * Fixes a bug causing failures during pg_upgrade

  * Fixes a bug preventing DML queries during colocated table creation

  * Fixes a bug that caused NULL parameters to be incorrectly passed as text

 -- Burak Yucesoy <burak@citusdata.com>  Wed, 30 Nov 2016 15:27:38 +0000

citus (6.0.0.citus-1) stable; urgency=low

  * Adds compatibility with PostgreSQL 9.6, now the recommended version

  * Removes the pg_worker_list.conf file in favor of a pg_dist_node table

  * Adds master_add_node and master_add_node UDFs to manage membership

  * Removes the \stage command and corresponding csql binary in favor of COPY

  * Removes copy_to_distributed_table in favor of first-class COPY support

  * Adds support for multiple DDL statements within a transaction

  * Adds support for certain foreign key constraints

  * Adds support for parallel INSERT INTO ... SELECT against colocated tables

  * Adds support for the TRUNCATE command

  * Adds support for HAVING clauses in SELECT queries

  * Adds support for EXCLUDE constraints which include the partition column

  * Adds support for system columns in queries (tableoid, ctid, etc.)

  * Adds support for relation name extension within INDEX definitions

  * Adds support for no-op UPDATEs of the partition column

  * Adds several general-purpose utility UDFs to aid in Citus maintenance

  * Adds master_expire_table_cache UDF to forcibly expire cached shards

  * Parallelizes the processing of DDL commands which affect distributed tables

  * Adds support for repartition jobs using composite or custom types

  * Enhances object name extension to handle long names and large shard counts

  * Parallelizes the master_modify_multiple_shards UDF

  * Changes distributed table creation to error if target table is not empty

  * Changes the pg_dist_shard.logicalrelid column from an oid to regclass

  * Adds a placementid column to pg_dist_shard_placement, replacing Oid use

  * Removes the pg_dist_shard.shardalias distribution metadata column

  * Adds pg_dist_partition.repmodel to track tables using streaming replication

  * Adds internal infrastructure to take snapshots of distribution metadata

  * Addresses the need to invalidate prepared statements on metadata changes

  * Adds a mark_tables_colocated UDF for denoting pre-6.0 manual colocation

  * Fixes a bug affecting prepared statement execution within PL/pgSQL

  * Fixes a bug affecting COPY commands using composite types

  * Fixes a bug that could cause crashes during EXPLAIN EXECUTE

  * Separates worker and master job temporary folders

  * Eliminates race condition between distributed modification and repair

  * Relaxes the requirement that shard repairs also repair colocated shards

  * Implements internal functions to track which tables' shards are colocated

  * Adds pg_dist_partition.colocationid to track colocation group membership

  * Extends shard copy and move operations to respect colocation settings

  * Adds pg_dist_local_group to prepare for future MX-related changes

  * Adds create_distributed_table to easily create shards and infer colocation

 -- Jason Petersen <jason@citusdata.com>  Tue, 8 Nov 2016 19:45:45 +0000

citus (5.2.2.citus-1) stable; urgency=low

  * Adds support for IF NOT EXISTS clause of CREATE INDEX command

  * Adds support for RETURN QUERY and FOR ... IN PL/pgSQL features

  * Extends the router planner to handle more queries

  * Changes COUNT of zero-row sets to return 0 rather than an empty result

  * Reduces the minimum permitted task_tracker_delay to a single millisecond

  * Fixes a bug that caused crashes during joins with a WHERE false clause

  * Fixes a bug triggered by unique violation errors raised in long txns

  * Fixes a bug resulting in multiple registration of transaction callbacks

  * Fixes a bug which could result in stale reads of distribution metadata

  * Fixes a bug preventing distributed modifications in some PL/pgSQL functions

  * Fixes some code paths that could hypothetically read uninitialized memory

  * Lowers log level of "waiting for activity" messages

 -- Jason Petersen <jason@citusdata.com>  Tue, 8 Nov 2016 18:43:37 +0000

citus (5.2.1.citus-1) stable; urgency=low

  * Fixes subquery pushdown to properly extract outer join qualifiers

  * Addresses possible memory leak during multi-shard transactions

 -- Jason Petersen <jason@citusdata.com>  Tue, 6 Sep 2016 20:47:15 +0000

citus (5.2.0.citus-1) stable; urgency=low

  * Drops support for PostgreSQL 9.4; PostgreSQL 9.5 is required

  * Adds schema support for tables, named objects (types, operators, etc.)

  * Evaluates non-immutable functions on master in all modification commands

  * Adds support for SERIAL types in non-partition columns

  * Adds support for RETURNING clause in INSERT, UPDATE, and DELETE commands

  * Adds support for multi-statement transactions using a fixed set of nodes

  * Full SQL support for SELECT queries which can be executed on single worker

  * Adds option to perform DDL changes using prepared transactions (2PC)

  * Adds an enable_ddl_propagation parameter to control DDL propagation

  * Accelerates shard pruning during merges

  * Adds master_modify_multiple_shards UDF to modify many shards at once

  * Adds COPY support for arrays of user-defined types

  * Now supports parameterized prepared statements for certain use cases

  * Extends LIMIT/OFFSET support to all executor types

  * Constraint violations now fail fast rather than hitting all placements

  * Makes master_create_empty_shard aware of shard placement policy

  * Reduces unnecessary sleep during queries processed by real-time executor

  * Improves task tracker executor's task cleanup logic

  * Relaxes restrictions on cancellation of DDL commands

  * Removes ONLY keyword from worker SELECT queries

  * Error message improvements and standardization

  * Moves master_update_shard_statistics function to pg_catalog schema

  * Fixes a bug where hash-partitioned anti-joins could return bad results

  * Now sets storage type correctly for foreign table-backed shards

  * Fixes master_update_shard_statistics issue with hash-partitioned tables

  * Fixes an issue related to extending table names that require escaping

  * Reduces risk of row counter overflows during modifications

  * Fixes a crash related to FILTER clause use in COUNT DISTINCT subqueries

  * Fixes crashes related to partition columns with high attribute numbers

  * Fixes certain subquery and join crashes

  * Detects flex for build even if PostgreSQL was built without it

  * Fixes assert-enabled crash when all_modifications_commutative is true

 -- Jason Petersen <jason@citusdata.com>  Wed, 17 Aug 2016 10:23:21 +0000

citus (5.2.0~rc.1-1) testing; urgency=low

  * Release candidate for 5.2.

 -- Jason Petersen <jason@citusdata.com>  Mon, 01 Aug 2016 17:01:05 +0000

citus (5.1.1-1) stable; urgency=low

  * Adds complex count distinct expression support in repartitioned subqueries

  * Improves task tracker job cleanup logic, addressing a memory leak

  * Fixes bug that generated incorrect results for LEFT JOIN queries

  * Improves compatibility with Debian's reproducible builds project

  * Fixes build issues on FreeBSD platforms

 -- Jason Petersen <jason@citusdata.com>  Fri, 17 Jun 2016 16:20:15 +0000

citus (5.1.0-1) stable; urgency=low

  * Adds distributed COPY to rapidly populate distributed tables

  * Adds support for using EXPLAIN on distributed queries

  * Recognizes and fast-paths single-shard SELECT statements automatically

  * Increases INSERT throughput via shard pruning optimizations

  * Improves planner performance for joins involving tables with many shards

  * Adds ability to pass columns as arguments to function calls in UPDATEs

  * Introduces transaction manager for use by multi-shard commands

  * Adds COUNT(DISTINCT ...) pushdown optimization for hash-partitioned tables

  * Adds support for some UNIQUE indexes on hash- or range-partitioned tables

  * Deprecates \stage in favor of using COPY for append-partition tables

  * Deprecates copy_to_distributed_table in favor of first-class COPY support

  * Fixes build problems when using non-packaged PostgreSQL installs

  * Fixes bug that sometimes skipped pruning when partitioned by VARCHAR column

  * Fixes bug impeding use of user functions in repartitioned subqueries

  * Fixes bug involving queries with equality comparisons of boolean types

  * Fixes crash that prevented use alongside pg_stat_statements

  * Fixes crash arising from SELECT queries that lack a target list

  * Improves warning and error messages

 -- Jason Petersen <jason@citusdata.com>  Tue, 17 May 2016 16:55:02 +0000

citus (5.1.0~rc.2-1) testing; urgency=low

  * Fix EXPLAIN output when FORMAT JSON in use

 -- Jason Petersen <jason@citusdata.com>  Mon, 16 May 2016 11:08:09 +0000

citus (5.1.0~rc.1-1) testing; urgency=low

  * Release candidate for 5.1.

 -- Jason Petersen <jason@citusdata.com>  Wed, 04 May 2016 19:26:23 +0000

citus (5.0.1-1) stable; urgency=low

  * Fixes issues on 32-bit systems

 -- Jason Petersen <jason@citusdata.com>  Fri, 15 Apr 2016 19:17:35 +0000

citus (5.0.0-1) stable; urgency=low

  * Initial release

 -- Jason Petersen <jason@citusdata.com>  Thu, 24 Mar 2016 10:12:52 -0400
