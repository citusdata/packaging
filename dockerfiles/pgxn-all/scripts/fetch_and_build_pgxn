#!/bin/bash

# make bash behave
set -euo pipefail
IFS=$'\n\t'

# constants
stdout=1
stderr=2
success=0
failure=1
badusage=64
noinput=66

builddir=$(pwd)

# outputs usage message on specified device before exiting with provided status
usage() {
    cat <<'E_O_USAGE' >&"$1"
usage: fetch_and_build_pgxn build_type

    build_type: 'release'

fetch_and_build_pgxn builds a PGXN package using local build files. The build
type 'release' builds the latest release tag. At present, the only supported
build is a 'release' build of the 'citus' project.
E_O_USAGE

    exit "${2}"
}

if [ "$#" -ne 1 ]; then
    usage $stderr $badusage
fi

if [ "${1}" = '-h' ]; then
    usage $stdout $success
fi

# populate variables from packaging metadata file
# shellcheck source=/dev/null
source /buildfiles/pkgvars

# set default values for certain packaging variables
declare pkglatest # to make shellcheck happy
hubproj="${hubproj:-${pkgname}}"
nightlypg="${nightlypg:-${releasepg}}"

if [ -z "${pkglatest}" ]; then
    echo "$0: pkgvars file must specify a value for pkglatest" >&2
    exit $noinput
fi

echo "header=\"Authorization: token ${GITHUB_TOKEN}\"" >~/.curlrc

cp -R /buildfiles/META.json "${builddir}"
repopath="citusdata/${hubproj}"

case "${1}" in
release)
    packageversion=${pkglatest%-*}
    releasetag="v${packageversion/'~'/-}"

    gitsha=$(curl -s "https://api.github.com/repos/${repopath}/git/refs/tags/${releasetag}" |
        jq -r '.object.sha')
    if [ "${gitsha}" == 'null' ]; then
        echo "$0: could not determine commit for git tag ${releasetag}" >&2
        exit $failure
    fi

    verified=$(curl -sH 'Accept:application/vnd.github.cryptographer-preview+sha' \
        "https://api.github.com/repos/${repopath}/git/tags/${gitsha}" |
        jq -r '.verification.verified')
    if [ "${verified}" != 'true' ]; then
        echo "$0: could not verify signature for git tag ${releasetag}" >&2
        exit $failure
    fi
    ;;
*)
    echo "$0: unknown build_type -- ${1}" >&2
    usage $stderr $badusage
    ;;
esac

tarballpath="${builddir}/${pkgname}_${packageversion}.orig.tar.gz"
packagepath="${builddir}/${pkgname}-${packageversion}"
finalpath="${packagepath}.zip"

curl -sL "https://api.github.com/repos/${repopath}/tarball/${gitsha}" \
    -o "${tarballpath}"

mkdir -p "${packagepath}"
tar xf "${tarballpath}" -C "${packagepath}" --strip-components 1

cp "${builddir}/META.json" "${packagepath}/META.json"

# remove extraneous slashes: zip doesn't like them
zip -qr "${finalpath//\/\//\/}" "${packagepath//\/\//\/}"

cp "${finalpath}" /packages
