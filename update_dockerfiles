#!/bin/bash

# make bash behave
set -euo pipefail
IFS=$'\n\t'

pgversions='11 12'
topdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
dockerfiles_dir="${topdir}/dockerfiles"
templates_dir="${topdir}"/templates

badusage=64

function update_rpm_dockerfile {
    os=$1
    release=$2
    pgversion=$3

    pgshort=${pgversion//./}
    target_subdir="${dockerfiles_dir}/${os}-${release}-pg${pgshort}"

    dl_prefix="download.postgresql.org/pub/repos/yum/${pgversion}"
    file_pattern="^pgdg-redhat.*-latest.*rpm"

    if [[ "${os}" = 'centos' ]] || [[ "${os}" = 'oraclelinux' ]]; then
        rpms_url="${dl_prefix}/redhat/rhel-${release}-x86_64/"
    elif [[ "${os}" = 'fedora' ]]; then
        rpms_url="${dl_prefix}/fedora/fedora-${release}-x86_64/"
    else
        echo "$0: unrecognized OS -- ${os}" >&2
        exit $badusage
    fi

    rpm_url=https://download.postgresql.org/pub/repos/yum/reporpms/EL-$release-x86_64/pgdg-redhat-repo-latest.noarch.rpm

    mkdir -p "${target_subdir}"

    template="${templates_dir}"/Dockerfile-rpm.tmpl
    sed "$sed_cmd; s#%%rpm_url%%#${rpm_url}#g; s/%%pgshort%%/${pgshort}/g; s/%%pgversion%%/${pgversion}/g" \
        "${template}" > "${target_subdir}/Dockerfile"

    cp -R scripts "${target_subdir}"
    rm "${target_subdir}/scripts/fetch_and_build_deb" \
       "${target_subdir}/scripts/fetch_and_build_pgxn"
}

while read -r line; do
    IFS=',' read -r os release <<< "$line"

    sed_cmd='s/%%os%%/'"${os}"'/g; s/%%release%%/'"${release}"'/g'

    if [[ "${os}" = 'debian' ]] || [[ "${os}" = 'ubuntu' ]]; then
        # debian variants have a single Dockerfile
        target_subdir="${dockerfiles_dir}/${os}-${release}-all"
        mkdir -p "${target_subdir}"

        template="${templates_dir}"/Dockerfile-deb.tmpl
        sed 's/%%os%%/'"${os}"'/g; s/%%release%%/'"${release}"'/g' \
            "${template}" > "${target_subdir}/Dockerfile"

        cp -R make_pg_buildext_parallel.patch scripts "${target_subdir}"
        rm "${target_subdir}/scripts/fetch_and_build_rpm" \
           "${target_subdir}/scripts/fetch_and_build_pgxn"
    elif [[ "${os}" = 'centos' ]] || [[ "${os}" = 'fedora' ]] || [[ "${os}" = 'oraclelinux' ]]; then
        # redhat variants need a Dockerfile for each PostgreSQL version
        IFS=' '
        for pgversion in ${pgversions}; do
            update_rpm_dockerfile "${os}" "${release}" "${pgversion}"
        done
    elif [[ "${os}" = 'pgxn' ]]; then
        # pgxn only needs a single build box
        target_subdir="${dockerfiles_dir}/${os}-all"
        mkdir -p "${target_subdir}"

        template="${templates_dir}"/Dockerfile-pgxn.tmpl
        sed 's/%%os%%/'"${os}"'/g; s/%%release%%/'"${release}"'/g' \
            "${template}" > "${target_subdir}/Dockerfile"

        cp -R scripts "${target_subdir}"
        rm "${target_subdir}/scripts/fetch_and_build_deb" \
           "${target_subdir}/scripts/fetch_and_build_rpm" \
           "${target_subdir}/scripts/determine_name" \
           "${target_subdir}/scripts/determine_email"

    else
        echo "$0: unrecognized OS -- ${os}" >&2
        exit $badusage
    fi
done <"${topdir}/os-list.csv"
