#!/bin/bash

# make bash behave
set -euo pipefail
IFS=$'\n\t'

pgversions='10 11 12 13 14'
topdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/.."
dockerfiles_dir="${topdir}/dockerfiles"

badusage=64

nprocs="${1:-1}"

if [[ ${TEST} == "false" && ${CURRENT_BRANCH} != "develop" ]] ; then
    echo "PR is not merged to develop, not pushing to DockerHub"
    exit 0;
fi

if [ "${TEST}" == "true" ]; then
    image_name="packaging-test"
else
    image_name="packaging"
fi

echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USER_NAME}" --password-stdin

declare args

while read -r line; do
    IFS=',' read -r os release <<< "$line"
    if [ ! -z ${TARGET_PLATFORM} ] && [ ${line} != ${TARGET_PLATFORM} ]; then
        continue
    fi
    if [[ "${os}" = 'debian' ]] || [[ "${os}" = 'ubuntu' ]]; then
        tag="${os}-${release}-all"
        args+="push citus/${image_name}:${tag}\n"
    elif [[ "${os}" = 'centos' ]] || [[ "${os}" = 'fedora' ]] || [[ "${os}" = 'oraclelinux' ]]; then
        # redhat variants need an image for each PostgreSQL version
        IFS=' '
        for pgversion in ${pgversions}; do
            # if pg_version is given as parameter from TARGET_PLATFORM then match the version and execute for it
            if [ -n "${POSTGRES_VERSION}" ] && [ "${pgversion}" != "${POSTGRES_VERSION}" ] ; then
                continue
            fi
            if { [[ "${os}" = 'centos' ]] || [[ "${os}" = 'oraclelinux' ]]; } && \
                 [[ "${release}" = '6' ]] && [[ "${pgversion}" = '13' ]]; then
                # CentOS and OracleLinux 6 doesn't have pg13 packages yet.
                # So skip building docker images for them.
                continue
            fi
            pgshort=${pgversion//./}
            tag="${os}-${release}-pg${pgshort}"
            args+="push citus/${image_name}:${tag}\n"
        done
    elif [[ "${os}" = 'pgxn' ]]; then
        tag="${os}-all"
        args+="push citus/${image_name}:${tag}\n"
    else
        echo "$0: unrecognized OS -- ${os}" >&2
        exit $badusage
    fi
done <"${topdir}/os-list.csv"

echo -e "${args}" | xargs -t -L1 -P "${nprocs}" docker

docker tag citus/"${image_name}":"${tag}" citusengine.azurecr.io/citus/"${image_name}":"${tag}"
echo "${ACR_PASSWORD}" | docker login citusengine.azurecr.io -u "${ACR_SERVICE_PRINCIPAL_ID}" --password-stdin
ONEBRANCH_ACR_REGISTRY_NAME="citusengine.azurecr.io/citus/"
ACR_COMMAND=$(echo "${args}" | sed "s#citus/#${ONEBRANCH_ACR_REGISTRY_NAME}#")
echo -e "${ACR_COMMAND}" | xargs -t -L1 -P "${nprocs}" docker


